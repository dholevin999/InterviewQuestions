// depth first search
func DFS(root: BinaryTreeNode) -> [Int] {
    var stack = Stack<BinaryTreeNode>()
    stack.push(root)
    
    var nodesExplored = [Int]()
    
    while !stack.isEmpty {
        let node = stack.pop()
        nodesExplored.append((node?.val)!)
        
        if node?.right != nil {
            stack.push((node?.right)!)
        }
        
        if node?.left != nil {
            stack.push((node?.left)!)
        }
        
    }
    
    return nodesExplored
}

// breadth first search
func BFS(root: BinaryTreeNode) -> [Int] {
    var queue = Queue<BinaryTreeNode>()
    queue.enqueue(root)
    
    var nodesExplored = [Int]()
    
    while !queue.isEmpty {
        let node = queue.dequeue()
        nodesExplored.append((node?.val)!)
        
        if node?.left != nil {
            queue.enqueue((node?.left)!)
        }
        if node?.right != nil {
            queue.enqueue((node?.right)!)
        }
    }
    
    return nodesExplored
}

// in order traversal
func inOrder(root: BinaryTreeNode?) -> [Int] {
    var nodesExplored = [Int]()
    if root != nil {
        nodesExplored += inOrder(root: root?.left)
        nodesExplored.append((root?.val)!)
        nodesExplored += inOrder(root: root?.right)
    }
    
    return nodesExplored
}

// pre order traversal
func preOrder(root: BinaryTreeNode?) -> [Int] {
    var nodesExplored = [Int]()
    if root != nil {
        nodesExplored.append((root?.val)!)
        nodesExplored += preOrder(root: root?.left)
        nodesExplored += preOrder(root: root?.right)
    }
    
    return nodesExplored
}

// post order traversal
func postOrder(root: BinaryTreeNode?) -> [Int] {
    var nodesExplored = [Int]()
    
    if root != nil {
        nodesExplored += postOrder(root: root?.left)
        nodesExplored += postOrder(root: root?.right)
        nodesExplored.append((root?.val)!)
    }
    
    return nodesExplored
}

// min depth of a BT
func minDepth(root: BinaryTreeNode?) -> Int {
    if root == nil {
        return 0
    }
    
    if root?.left == nil && root?.right == nil {
        return 1
    }
    
    if root?.left == nil {
        return minDepth(root: root?.right) + 1
    }
    
    if root?.right == nil {
        return minDepth(root: root?.left) + 1
    }
    
    return min(minDepth(root: root?.left), minDepth(root: root?.right)) + 1
}

// max depth of BT
func maxDepth(root: BinaryTreeNode?) -> Int {
    if root == nil {
        return 0
    }
    
    return 1 + max(maxDepth(root: root?.left), maxDepth(root: root?.right))
}

// sum of left leaves
func sumOfLeftLeaves(_ root: BinaryTreeNode?) -> Int {
    if root == nil || root?.left == nil && root?.right == nil {
        return 0
    }
    var sum = 0
    
    var queue = Queue<BinaryTreeNode>()
    queue.enqueue(root!)
    
    
    while !queue.isEmpty {
        let node = queue.dequeue()
        
        if node?.left != nil {
            queue.enqueue((node?.left)!)
        }
        if node?.right != nil {
            queue.enqueue((node?.right)!)
        }
        
        if node?.left != nil && node?.left?.right == nil && node?.left?.left == nil {
            sum += (node?.left?.val)!
        }
    }
    
    return sum
}

// full tree = if each node has either 0 or 2 children
func isFullTree(root: BinaryTreeNode?) -> Bool {
    if root == nil {
        return true
    }
    
    if root?.left == nil && root?.right == nil {
        return true
    }
    
    if root?.left != nil && root?.right != nil  {
        return isFullTree(root: root?.left) && isFullTree(root: root?.right)
    }
    
    return false
}

// determine if two trees are the same
func isSameTree(_ p: BinaryTreeNode?, _ q: BinaryTreeNode?) -> Bool {
    if p == nil && q == nil {
        return true
    }
    
    if p == nil || q == nil {
        return false
    }
    
    if (p?.val)! == (q?.val)! {
        return isSameTree(p?.left, q?.left) && isSameTree(p?.right, q?.right)
    }
    
    return false
}

// find the lowest common ancestor of a BT
func lowestCommonAncestor(root: BinaryTreeNode?, p: BinaryTreeNode?, q: BinaryTreeNode?) -> BinaryTreeNode? {
    if root == nil || p == nil || q == nil {
        return root
    }
    
    let left = lowestCommonAncestor(root: root?.left, p: p, q: q)
    let right = lowestCommonAncestor(root: root?.right, p: p, q: q)
    if left != nil && right != nil {
        return root
    }
    
    return left != nil ? left : right
}

// insert a node into a BST
func insert(root: BinarySearchTree?, k: Int) -> BinarySearchTree? {
    if root == nil {
        let newNode = BinarySearchTree(value: k)
        return newNode
    }
    
    if (root?.value)! > k {
        root?.left = insert(root: root?.left, k: k)
    } else if (root?.value)! < k {
        root?.right = insert(root: root?.right, k: k)
    }
    return root
}
