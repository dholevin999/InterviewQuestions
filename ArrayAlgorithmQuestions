// 1.) find the missing number in an array
func findMissing(nums: [Int]) -> Int {
    let expectedSum = ((nums.count + 1) * (nums.count + 2)) / 2
    var sum = 0
    
    for num in nums {
        sum += num
    }
        
    return expectedSum - sum
}

// 2.) find duplicate number on array
func findDuplicateNumber(nums: [Int]) -> Int {
    var set = Set<Int>()
    
    for num in nums {
        if set.contains(num) {
            return num
        } else {
            set.insert(num)
        }
    }
    return -1
}

// 2.b) find duplicate number on array with no extra data structures
func findDuplicateNumber2(nums: [Int]) -> Int {
    let sortedNums = nums.sorted()
    
    for index in 0..<sortedNums.count - 1 {
        if sortedNums[index] == sortedNums[index + 1] {
            return sortedNums[index]
        }
    }
    return -1
}

// 3.) check if array contains a number
func checkArrayNumber(nums: [Int]) -> Bool {
    for num in nums {
        if Int(num) == num {
            return true
        }
    }
    return false
}

// 4.) find largest and smallest number in unsorted array
func maxAndMin(nums: [Int]) -> (Int, Int) {
    var maxNum = nums[0]
    var minNum = nums[0]
    
    for num in nums {
        maxNum = max(maxNum, num)
        minNum = min(minNum, num)
    }
    return (maxNum, minNum)
}

// 5.) find all pairs on integer array whose sum is equal to given number
func findSumPairs(nums: [Int], target: Int) -> [[Int]] {
    var result = [[Int]]()
    var dict = [Int : Int]()
    
    for index in 0..<nums.count {
        if let newK = dict[nums[index]] {
            result.append([newK, index])
        } else {
            dict[target - nums[index]] = index
        }
    }
    return result
}

// 6.) find repeated numbers in an array if it contains multiple duplicate
func findRepeatedWithMultiples(nums: [Int]) -> [Int : Int] {
    var result = [Int : Int]()
    var dict = [Int : Int]()
    
    for num in nums {
        if dict[num] != nil {
            dict.updateValue(dict[num]! + 1, forKey: num)
        } else {
            dict.updateValue(1, forKey: num)
        }
    }
    
    for (num, number) in dict {
        if number > 1 {
            result.updateValue(number, forKey: num)
        }
    }
    
    return result
}

// 7.) remove duplicates from array
func removeDuplicatesArray(nums: [Int]) -> [Int] {
    var set = Set<Int>()
    var result = [Int]()
    
    for num in nums {
        if !set.contains(num) {
            result.append(num)
            set.insert(num)
        }
    }
    return result
}

// 8.) sort an array in place using QuickSort
func quickSortPartition(a: inout [Int], low: Int, high: Int) -> Int {
    let pivot = a[low]
    
    var i = low - 1
    var j = high + 1
    
    while true {
        repeat { j -= 1 } while a[j] > pivot
        repeat { i += 1 } while a[i] < pivot
        
        if i < j {
            swap(&a[i], &a[j])
        } else {
            return j
        }
    }
}

func quickSortAlgorithm(a: inout [Int], low: Int, high: Int) {
    if low < high {
        let p = quickSortPartition(a: &a, low: low, high: high)
        quickSortAlgorithm(a: &a, low: low, high: p)
        quickSortAlgorithm(a: &a, low: p+1, high: high)
    }
}

// 9.) find intersection of two sorted arrays
func findIntersection(nums1: [Int], nums2: [Int]) -> [Int] {
    var result = [Int]()
    var set = Set<Int>()
    
    for num in nums1 {
        set.insert(num)
    }
    
    for num in nums2 {
        if set.contains(num) {
            result.append(num)
        }
    }
    return result
}

// 10.) There is an array with every element repeated twice except one. Find that element
func singleElement(nums: [Int]) -> Int {
    var set = Set<Int>()
    
    for num in nums {
        if set.contains(num) {
            set.remove(num)
        } else {
            set.insert(num)
        }
    }
    
    return set[set.startIndex]
}

func singleElementBit(nums: [Int]) -> Int {
    var result = 0
    
    for num in nums {
        result ^= num
    }
    return result
}

// 11.) find kth smallest element in unsorted array
func findKSmallest(nums: [Int], k: Int) -> Int {
    let sortedNum2 = nums.sorted()
    
    return sortedNum2[k - 1]
}

// 12.) find kth largest element in unsorted array
func findKLargest(nums: [Int], k: Int) -> Int {
    let sortedNums = nums.sorted()
    
    return sortedNums[sortedNums.count - k]
}

// 13.) find common elements in three sorted arrays
func findCommon(nums1: [Int], nums2: [Int], nums3: [Int]) -> [Int] {
    var i = 0
    var j = 0
    var k = 0
    var result = [Int]()
    
    while i < nums1.count && j < nums2.count && k < nums3.count {
        if nums1[i] == nums2[j] && nums2[j] == nums3[k] {
            result.append(nums1[i])
            i += 1
            j += 1
            k += 1
        } else if nums1[i] < nums2[j] {
            i += 1
        } else if nums2[j] < nums3[k] {
            j += 1
        } else {
            k += 1
        }
    }
    return result
}

// 14.) find the first repeating element in an array of integers
func firstRepeating(nums: [Int]) -> Int? {
    var set = Set<Int>()
    var index = nums.count - 1
    var result: Int?
    
    while index >= 0 {
        if set.contains(nums[index]) {
            result = nums[index]
        } else {
            set.insert(nums[index])
        }
        index -= 1
    }
    
    return result
}

// 15.) first non-repeating element in array of integers
func firstNonRepeating(nums: [Int]) -> Int {
    var repeating = Set<Int>()
    var nonRepeating = [Int]()
    var index = 0
    
    for num in nums {
        if repeating.contains(num) {
            continue
        }
        
        if nonRepeating.contains(num) {
            nonRepeating.remove(at: index)
            repeating.insert(num)
        } else {
            nonRepeating.append(num)
        }
        
        index += 1
    }
    return nonRepeating[0]
}

// 16.) find top two numbers from an integer array
func findTopTwo(nums: [Int]) -> [Int] {
    var max1 = nums[0]
    var max2 = nums[0]
    
    for num in nums {
        if num > max1 {
            max2 = max1
            max1 = num
        } else if num > max2 {
            max2 = num
        }
    }
    return [max1, max2]
}

// 17.) find the smallest positive integer value that cannot be represented as sum of any subset of a given sorted array
func findSmallest(nums: [Int]) -> Int {
    var result = 1
    var index = 0
    
    while index < nums.count && nums[index] <= result {
        result += nums[index]
        index += 1
    }
    return result
}

// 19.) find if there is a sub array with sum equal to zero
func subArrayZero(nums: [Int]) -> [[Int]] {
    var dict = [Int : Int]()
    var result = [[Int]]()
    
    for index in 0..<nums.count {
        if let newK = dict[nums[index]] {
            result.append([newK, index])
        } else {
            dict[0 - nums[index]] = index
        }
    }
    
    return result
}

// 20.) remove duplicates from array in place and return length
func removeDuplicatesInPlace(nums: inout [Int]) -> Int {
    var set = Set<Int>()
    
    for num in nums {
        if set.contains(num) {
            nums.remove(at: nums.index(of: num)!)
        } else {
            set.insert(num)
        }
    }
    return nums.count
}

// 21.) remove a given element from array and return length
func removeElementArray(nums: inout [Int], value: Int) -> Int {
    for num in nums {
        if num == value {
            nums.remove(at: nums.index(of: num)!)
        }
    }
    return nums.count
}

// 22.) merge a sorted array
func mergeSortedArray(nums1: [Int], nums2: [Int]) -> [Int] {
    var leftIndex = 0
    var rightIndex = 0
    var result = [Int]()
    
    while leftIndex < nums1.count && rightIndex < nums2.count {
        if nums1[leftIndex] < nums2[rightIndex] {
            result.append(nums1[leftIndex])
            leftIndex += 1
        } else if nums1[leftIndex] > nums2[rightIndex] {
            result.append(nums2[rightIndex])
            rightIndex += 1
        } else {
            result.append(nums1[leftIndex])
            leftIndex += 1
            result.append(nums2[rightIndex])
            rightIndex += 1
        }
    }
    
    while leftIndex < nums1.count {
        result.append(nums1[leftIndex])
        leftIndex += 1
    }
    
    while rightIndex < nums2.count {
        result.append(nums2[rightIndex])
        rightIndex += 1
    }
    
    return result
}

// 23.) find sub array with maximum sum in an array of positive and negative number
func maxSubArray(nums: [Int]) -> Int {
    var maxCurrent = nums[0]
    var maxSoFar = nums[0]
    
    for index in 0..<nums.count {
        maxCurrent = max(maxCurrent + nums[index], nums[index])
        maxSoFar = max(maxCurrent, maxSoFar)
    }
    return maxSoFar
}

// 24.) find sub array with largest product in array of both positive and negative number
func maxProductSubArray(nums: [Int]) -> Int {
    var maxEnding = 1
    var minEnding = 1
    var maxSoFar = 1
    
    for num in nums {
        if num > 0 {
            maxEnding = maxEnding * num
            minEnding = min(minEnding * num, 1)
        } else if num == 0 {
            maxEnding = 1
            minEnding = 1
        } else {
            let temp = maxEnding
            maxEnding = max(minEnding * num, 1)
            minEnding = temp * num
        }
        
        if maxSoFar < maxEnding {
            maxSoFar = maxEnding
        }
    }
    
    return maxSoFar
}

// 25.) find length of longest consecutive sequence in array of integers
func longestConSeq(nums: [Int]) -> Int {
    var set = Set<Int>()
    var result = 0
    
    for num in nums {
        set.insert(num)
    }
    
    for num in nums {
        if !set.contains(num - 1) {
            var i = num
            while set.contains(i) {
                i += 1
                
                if result < i - num {
                    result = i - num
                }
            }
        }
    }
    
    return result
}

// 26.) find minimum value in a rotated sorted array
func minRotatedArray(nums: [Int]) -> Int {
    var low = 0
    var high = nums.count - 1
    
    while low < high {
        if nums[low] < nums[high] {
            return nums[low]
        }
        
        let mid = (low + high) / 2
        
        if nums[mid] >= nums[low] {
            low = mid + 1
        } else {
            high = mid
        }
    }
    
    return nums[low]
}

// find the equalibrium position of the array
func EquilibriumProblem(_ A : inout [Int]) -> Int {
    var sum = 0
    var sumLower = 0
    
    for num in A {
        sum += num
    }
    
    for index in 0..<A.count {
        sum -= A[index]
        if sum == sumLower {
            return index
        }
        sumLower += A[index]
        
    }
    
    
    return -1
}

// Pascal's Triangle
func generate(_ numRows: Int) -> [[Int]] {
    if numRows == 0 {
        return []
    }
    var result = [[1], [1, 1]]
    
    if numRows == 1 {
        return [[1]]
    } else if numRows == 2 {
        return [[1], [1, 1]]
    }
    
    for index in 2..<numRows {
        var array = [1]
        
        for index2 in 1..<index {
            array.append(result[index - 1][index2 - 1] + result[index - 1][index2])
        }
        
        array.append(1)
        result.append(array)
    }
    
    return result
}

// search rotated sorted array
func searchRotatedArray(nums: [Int], key: Int) -> Int? {
    var start = 0
    var end = nums.count - 1
    
    while start < end {
        let mid = (start + end) / 2
        if nums[mid] == key {
            return mid
        }
        
        if nums[start] <= nums[mid] {
            if key >= nums[start] && key < nums[mid] {
                end = mid - 1
            } else {
                start = mid + 1
            }
        } else {
            if key > nums[mid] && key <= nums[end] {
                start = mid + 1
            } else {
                end = mid - 1
            }
        }
    }
    return nums[start] == key ? start : -1
}

// 0-1 knapsack problem
func knapSack(W: Int, wt: [Int], val: [Int], n: Int) -> Int {
    var k = [[Int?]]()
    k = Array(repeating: Array(repeating: nil, count: W+1), count: n+1)
    
    for i in 0...n {
        for w in 0...W {
            if i == 0 || w == 0 {
                k[i][w] = 0
            } else if wt[i-1] <= w {
                let temp1 = val[i-1]
                let temp2 = k[i-1][w-wt[i-1]]
                k[i][w] = max(temp1 + temp2!, k[i-1][w]!)
            } else {
                k[i][w] = k[i-1][w]
            }
        }
    }
    return k[n][W]!
}
