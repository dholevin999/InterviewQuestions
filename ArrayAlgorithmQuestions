// 1.) find the missing number in an array
func findMissing(nums: [Int]) -> Int {
    let expectedSum = ((nums.count + 1) * (nums.count + 2)) / 2
    var sum = 0
    
    for num in nums {
        sum += num
    }
        
    return expectedSum - sum
}

// 2.) find duplicate number on array
func findDuplicateNumber(nums: [Int]) -> Int {
    var set = Set<Int>()
    
    for num in nums {
        if set.contains(num) {
            return num
        } else {
            set.insert(num)
        }
    }
    return -1
}

// 2.b) find duplicate number on array with no extra data structures
func findDuplicateNumber2(nums: [Int]) -> Int {
    let sortedNums = nums.sorted()
    
    for index in 0..<sortedNums.count - 1 {
        if sortedNums[index] == sortedNums[index + 1] {
            return sortedNums[index]
        }
    }
    return -1
}

// 3.) check if array contains a number
func checkArrayNumber(nums: [Int]) -> Bool {
    for num in nums {
        if Int(num) == num {
            return true
        }
    }
    return false
}

// 4.) find largest and smallest number in unsorted array
func maxAndMin(nums: [Int]) -> (Int, Int) {
    var maxNum = nums[0]
    var minNum = nums[0]
    
    for num in nums {
        maxNum = max(maxNum, num)
        minNum = min(minNum, num)
    }
    return (maxNum, minNum)
}

// 5.) find all pairs on integer array whose sum is equal to given number
func findSumPairs(nums: [Int], target: Int) -> [[Int]] {
    var result = [[Int]]()
    var dict = [Int : Int]()
    
    for index in 0..<nums.count {
        if let newK = dict[nums[index]] {
            result.append([newK, index])
        } else {
            dict[target - nums[index]] = index
        }
    }
    return result
}

// 6.) find repeated numbers in an array if it contains multiple duplicate
func findRepeatedWithMultiples(nums: [Int]) -> [Int : Int] {
    var result = [Int : Int]()
    var dict = [Int : Int]()
    
    for num in nums {
        if dict[num] != nil {
            dict.updateValue(dict[num]! + 1, forKey: num)
        } else {
            dict.updateValue(1, forKey: num)
        }
    }
    
    for (num, number) in dict {
        if number > 1 {
            result.updateValue(number, forKey: num)
        }
    }
    
    return result
}

// 7.) remove duplicates from array
func removeDuplicatesArray(nums: [Int]) -> [Int] {
    var set = Set<Int>()
    var result = [Int]()
    
    for num in nums {
        if !set.contains(num) {
            result.append(num)
            set.insert(num)
        }
    }
    return result
}

// 8.) sort an array in place using QuickSort
func quickSortPartition(a: inout [Int], low: Int, high: Int) -> Int {
    let pivot = a[low]
    
    var i = low - 1
    var j = high + 1
    
    while true {
        repeat { j -= 1 } while a[j] > pivot
        repeat { i += 1 } while a[i] < pivot
        
        if i < j {
            swap(&a[i], &a[j])
        } else {
            return j
        }
    }
}

func quickSortAlgorithm(a: inout [Int], low: Int, high: Int) {
    if low < high {
        let p = quickSortPartition(a: &a, low: low, high: high)
        quickSortAlgorithm(a: &a, low: low, high: p)
        quickSortAlgorithm(a: &a, low: p+1, high: high)
    }
}

// 9.) find intersection of two sorted arrays
func findIntersection(nums1: [Int], nums2: [Int]) -> [Int] {
    var result = [Int]()
    var set = Set<Int>()
    
    for num in nums1 {
        set.insert(num)
    }
    
    for num in nums2 {
        if set.contains(num) {
            result.append(num)
        }
    }
    return result
}
