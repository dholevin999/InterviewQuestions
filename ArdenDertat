// solutions to Arden Dertat's Interview Questions

// 1.) array pair sum: Given an integer array, output all pairs that sum up to a specific value k.
func pairSum(nums: [Int], target: Int) -> [[Int]] {
    var dict = [Int : Int]()
    var result = [[Int]]()
    
    for index in 0..<nums.count {
        if let newK = dict[nums[index]] {
            result.append([newK, index])
        } else {
            dict[target - nums[index]] = index
        }
    }
    
    return result
}

//pairSum(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9], target: 10) //[[3, 5], [2, 6], [1, 7], [0, 8]]
//pairSum(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9], target: 8) //[[2, 4], [1, 5], [0, 6]]
//pairSum(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9], target: 6) //[[1, 3], [0, 4]]

// 2.) matrix region sum: Given a matrix of integers and coordinates of a rectangular region within the matrix, find the sum of numbers falling inside the rectangle
func regionSum(matrix: [[Int]], topLeft: [Int], bottomRight: [Int]) -> Int {
    var sum = 0
    
    if matrix.count == 0 {
        return sum
    }
    
    for i in topLeft[0]..<bottomRight[0] + 1 {
        for j in topLeft[1]..<bottomRight[1] + 1 {
            sum += matrix[i][j]
        }
    }
    
    return sum
}

//regionSum(matrix: [[0, 1, 2], [3, 4, 5], [6, 7, 8]], topLeft: [1, 1], bottomRight: [2, 2]) //24
//regionSum(matrix: [[0, 1, 2], [3, 4, 5], [6, 7, 8]], topLeft: [0, 0], bottomRight: [2, 2]) //36
//regionSum(matrix: [[0, 1, 2], [3, 4, 5], [6, 7, 8]], topLeft: [2, 2], bottomRight: [2, 2]) //8

// 3.) largest continuous sum: Given an array of integers (positive and negative) find the largest continuous sum.
func largestContSum(nums: [Int]) -> Int {
    if nums.count == 0 {
        return 0
    }
    
    var maxCurrent = nums[0]
    var maxSoFar = nums[0]
    
    for i in 1..<nums.count {
        maxCurrent = max(nums[i], maxCurrent + nums[i])
        maxSoFar = max(maxCurrent, maxSoFar)
    }
    
    return maxSoFar
}

//largestContSum(nums: [1, -4, 5, -9, 10, -7, 5]) //10
//largestContSum(nums: [5, 6, 10, -9, 1, -12, 1]) //21
//largestContSum(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]) //45

// 4.) find missing element: There is an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.
func findMissing(nums1: [Int], nums2: [Int]) -> Int {
    var set = Set<Int>()
    
    for num in nums2 {
        set.insert(num)
    }
    
    print(set)
    
    for num in nums1 {
        if !set.contains(num) {
            return num
        }
    }
    
    return -1
}

//findMissing(nums1: [1, 2, 3, 4, 5, 6, 7, 8, 9], nums2: [1, 2, 3, 4, 5, 6, 7, 8]) //9
//findMissing(nums1: [1, 2, 3, 4, 5, 6, 7, 8, 9], nums2: [1, 3, 4, 5, 6, 7, 8, 9]) //2
//findMissing(nums1: [1, 2, 3, 4, 5, 6, 7, 8, 9], nums2: [1, 2, 3, 5, 6, 7, 8, 9]) //4

// 5.) linked list remove Nodes: Given a linkedlist of integers and an integer value, delete every node of the linkedlist containing that value.
func removeNodes(head: ListNode?, n: Int) -> ListNode? {
    var currentHead = head
    
    while currentHead != nil {
        if (currentHead?.value)! == n {
            currentHead?.next = currentHead?.next?.next
        } else {
            currentHead = currentHead?.next
        }
    }
    return currentHead
}

// 6.) combine two strings: We are given 3 strings: str1, str2, and str3. Str3 is said to be a shuffle of str1 and str2 if it can be formed by interleaving the characters of str1 and str2 in a way that maintains the left to right ordering of the characters from each string. Given these 3 strings write a function that detects whether str3 is a valid shuffle of str1 and str2.
func isShuffle(str1: String, str2: String, str3: String) -> Bool {
    if str1.characters.count + str2.characters.count != str3.characters.count {
        return false
    }
    
    if str1.characters.count == 0 || str2.characters.count == 0 {
        if str1 + str2 == str3 {
            return true
        } else {
            return false
        }
    }
    
    if str1[str1.startIndex] != str3[str3.startIndex] && str2[str2.startIndex] != str3[str3.startIndex] {
        return false
    }
    
    if str1[str1.startIndex] == str3[str3.startIndex] && isShuffle(str1: str1.substring(from: str1.index(after: str1.startIndex)), str2: str2, str3: str3.substring(from: str3.index(after: str3.startIndex))) {
        return true
    }
    
    if str2[str2.startIndex] == str3[str3.startIndex] && isShuffle(str1: str1, str2: str2.substring(from: str2.index(after: str2.startIndex)), str3: str3.substring(from: str3.index(after: str3.startIndex))) {
        return true
    }
    
    return false
}

//isShuffle(str1: "abc", str2: "def", str3: "dabecf") //true
//isShuffle(str1: "abc", str2: "def", str3: "edabcf") //false
//isShuffle(str1: "abc", str2: "def", str3: "bdaecf") //false

// 7.) binary search tree check: Given a binary tree, check whether itâ€™s a binary search tree or not.
func isBST(root: TreeNode?, min: Int, max: Int) -> Bool {
    if root == nil {
        return true
    }
    
    if (root?.value)! > max || (root?.value)! < min {
        return false
    }
    
    return isBST(root: root?.left, min: min, max: (root?.value)! - 1) && isBST(root: root?.right, min: (root?.value)! + 1, max: max)
}
