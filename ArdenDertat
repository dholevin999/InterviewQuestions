// solutions to Arden Dertat's Interview Questions

// 1.) array pair sum: Given an integer array, output all pairs that sum up to a specific value k.
func pairSum(nums: [Int], target: Int) -> [[Int]] {
    var dict = [Int : Int]()
    var result = [[Int]]()
    
    for index in 0..<nums.count {
        if let newK = dict[nums[index]] {
            result.append([newK, index])
        } else {
            dict[target - nums[index]] = index
        }
    }
    
    return result
}

//pairSum(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9], target: 10) //[[3, 5], [2, 6], [1, 7], [0, 8]]
//pairSum(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9], target: 8) //[[2, 4], [1, 5], [0, 6]]
//pairSum(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9], target: 6) //[[1, 3], [0, 4]]

// 2.) matrix region sum: Given a matrix of integers and coordinates of a rectangular region within the matrix, find the sum of numbers falling inside the rectangle
func regionSum(matrix: [[Int]], topLeft: [Int], bottomRight: [Int]) -> Int {
    var sum = 0
    
    if matrix.count == 0 {
        return sum
    }
    
    for i in topLeft[0]..<bottomRight[0] + 1 {
        for j in topLeft[1]..<bottomRight[1] + 1 {
            sum += matrix[i][j]
        }
    }
    
    return sum
}

//regionSum(matrix: [[0, 1, 2], [3, 4, 5], [6, 7, 8]], topLeft: [1, 1], bottomRight: [2, 2]) //24
//regionSum(matrix: [[0, 1, 2], [3, 4, 5], [6, 7, 8]], topLeft: [0, 0], bottomRight: [2, 2]) //36
//regionSum(matrix: [[0, 1, 2], [3, 4, 5], [6, 7, 8]], topLeft: [2, 2], bottomRight: [2, 2]) //8

// 3.) largest continuous sum: Given an array of integers (positive and negative) find the largest continuous sum.
func largestContSum(nums: [Int]) -> Int {
    if nums.count == 0 {
        return 0
    }
    
    var maxCurrent = nums[0]
    var maxSoFar = nums[0]
    
    for i in 1..<nums.count {
        maxCurrent = max(nums[i], maxCurrent + nums[i])
        maxSoFar = max(maxCurrent, maxSoFar)
    }
    
    return maxSoFar
}

//largestContSum(nums: [1, -4, 5, -9, 10, -7, 5]) //10
//largestContSum(nums: [5, 6, 10, -9, 1, -12, 1]) //21
//largestContSum(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9]) //45
