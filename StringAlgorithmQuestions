// 1.) Find Duplicate Characters from String
func findDuplicatesString(str: String) -> [Character] {
    var result = [Character]()
    var set = Set<Character>()
    let strChar = Array(str.characters)
    
    for char in strChar {
        if set.contains(char) {
            result.append(char)
        } else {
            set.insert(char)
        }
    }
    
    return result
}

// 2.) check if two Strings are anagrams of each other
func checkAnagram(str1: String, str2: String) -> Bool {
    if str1.characters.count != str2.characters.count {
        return false
    }
    
    var str2Array = Array(str2.characters)
    
    for char in str1.characters {
        let index = str2Array.index(of: char)
        
        if index != -1 && index != nil {
            str2Array.remove(at: index!)
        } else {
            return false
        }
    }
    
    return str2Array.count == 0
}

// 3.) print first non repeated character from String
func firstNonRepeating(str: String) -> Character {
    var repeating = Set<Character>()
    var nonRepeating = [Character]()
    var index = 0
    let strArray = Array(str.characters)
    
    for char in str.characters {
        if repeating.contains(char) {
            continue
        }
        
        if nonRepeating.contains(char) {
            nonRepeating.remove(at: strArray.index(of: char)!)
            repeating.insert(char)
        } else {
            nonRepeating.append(char)
        }
        index += 1
    }
    
    return nonRepeating[0]
}

// 4.) reverse a string
// a.) using iteration
func reverseStringIteration(str: String) -> String {
    var result = Array(str.characters)
    var temp: Character
    var p1 = 0
    var p2 = str.characters.count - 1
    
    while p1 < str.characters.count / 2 {
        temp = result[p1]
        result[p1] = result[p2]
        result[p2] = temp
        
        p1 += 1
        p2 -= 1
    }
    
    return String(result)
}

// b.) using recursion
func reverseStringRecursion(str: String) -> String {
    if str.characters.count < 2 {
        return str
    }
    
    return reverseStringRecursion(str: (String(str.substring(from: str.index(after: str.startIndex)))!)) + String(str[str.startIndex])
}

// 5.) check if a String contains only digits
func onlyDigits(str: String) -> Bool {
    return Int(str) != nil
}
