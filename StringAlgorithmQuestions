// 1.) Find Duplicate Characters from String
func findDuplicatesString(str: String) -> [Character] {
    var result = [Character]()
    var set = Set<Character>()
    let strChar = Array(str.characters)
    
    for char in strChar {
        if set.contains(char) {
            result.append(char)
        } else {
            set.insert(char)
        }
    }
    
    return result
}

// 2.) check if two Strings are anagrams of each other
func checkAnagram(str1: String, str2: String) -> Bool {
    if str1.characters.count != str2.characters.count {
        return false
    }
    
    var str2Array = Array(str2.characters)
    
    for char in str1.characters {
        let index = str2Array.index(of: char)
        
        if index != -1 && index != nil {
            str2Array.remove(at: index!)
        } else {
            return false
        }
    }
    
    return str2Array.count == 0
}

// 3.) print first non repeated character from String
func firstNonRepeating(str: String) -> Character {
    var repeating = Set<Character>()
    var nonRepeating = [Character]()
    var index = 0
    let strArray = Array(str.characters)
    
    for char in str.characters {
        if repeating.contains(char) {
            continue
        }
        
        if nonRepeating.contains(char) {
            nonRepeating.remove(at: strArray.index(of: char)!)
            repeating.insert(char)
        } else {
            nonRepeating.append(char)
        }
        index += 1
    }
    
    return nonRepeating[0]
}

// 4.) reverse a string
// a.) using iteration
func reverseStringIteration(str: String) -> String {
    var result = Array(str.characters)
    var temp: Character
    var p1 = 0
    var p2 = str.characters.count - 1
    
    while p1 < str.characters.count / 2 {
        temp = result[p1]
        result[p1] = result[p2]
        result[p2] = temp
        
        p1 += 1
        p2 -= 1
    }
    
    return String(result)
}

// b.) using recursion
func reverseStringRecursion(str: String) -> String {
    if str.characters.count < 2 {
        return str
    }
    
    return reverseStringRecursion(str: (String(str.substring(from: str.index(after: str.startIndex)))!)) + String(str[str.startIndex])
}

// 5.) check if a String contains only digits
func onlyDigits(str: String) -> Bool {
    return Int(str) != nil
}

// 6.) print all duplicate character and their count
func findCountOfDuplicates(str: String) -> [Character: Int] {
    var strDict = [Character : Int]()
    var result = [Character : Int]()
    let strArray = Array(str.characters)
    
    for char in strArray {
        if (strDict[char] != nil) {
            strDict.updateValue(strDict[char]! + 1, forKey: char)
        } else {
            strDict.updateValue(1, forKey: char)
        }
    }
    
    for (char, number) in strDict {
        if number > 1 {
            result.updateValue(number, forKey: char)
        }
    }
    
    return result
}

// 7.) count number of vowels and consonants in a String
func countVowelsAndConsonants(str: String) -> [Int] {
    var vowelsCount = 0
    var consonantsCount = 0
    let strArray = Array(str.lowercased().characters)
    
    for char in strArray {
        switch char {
        case "a", "e", "i", "o", "y":
            vowelsCount += 1
        default:
            consonantsCount += 1
        }
    }
    
    return [vowelsCount, consonantsCount]
}

// 8.) count occurrence of a given character in String
func countCharacter(str: String, character: Character) -> Int {
    var count = 0
    let strArray = Array(str.lowercased().characters)
    
    for char in strArray {
        if char == character {
            count += 1
        }
    }
    
    return count
}

// 9.) convert numeric String to an int
func convertStringToInt(str: String) -> Int? {
    return Int(str) != nil ? Int(str)! : nil
}

// 10.) replace each given character to other e.g. blank with %20
func replaceSpaces(str: String) -> String {
    var result = ""
    
    for char in str.characters {
        if char == " " {
            result += "%20"
        } else {
            result += String(char)
        }
    }
    
    return result
}

// 12.) reverse the words in a sentence
func reverseSentence(str: String) -> String {
    var input = reverseSection(str: str, start: 0, end: str.characters.count)
    var startIndex = 0
    var endIndex = 0
    var result = ""
    
    for char in input.characters {
        if endIndex == input.characters.count - 1 {
            result += reverseSection(str: input, start: startIndex, end: endIndex+1)
            result += " "
            startIndex = endIndex + 1
            endIndex += 1
        }
        
        if char != " " {
            endIndex += 1
        } else {
            result += reverseSection(str: input, start: startIndex, end: endIndex)
            result += " "
            startIndex = endIndex + 1
            endIndex += 1
        }
    }
    return result
}

func reverseSection(str: String, start: Int, end: Int) -> String {
    var p1 = start
    var p2 = end - 1
    var temp: Character
    var strArray = Array(str.characters)
    
    while p1 <= (p2 + p1) / 2 {
        temp = strArray[p1]
        strArray[p1] = strArray[p2]
        strArray[p2] = temp
        p1 += 1
        p2 -= 1
    }
    return String(strArray[start..<end])
}

// 13.) check if String is Palindrome
func checkPalindrome(str: String) -> Bool {
    var p1 = 0
    var p2 = str.characters.count - 1
    var strArray = Array(str.characters)
    
    while p1 < str.characters.count / 2 {
        if strArray[p1] != strArray[p2] {
            return false
        }
        
        p1 += 1
        p2 -= 1
    }
    return true
}

// 14.) remove duplicate characters from String
func removeDupsFromString(str: String) -> String {
    var input = str.lowercased()
    var result = ""
    var set = Set<Character>()
    
    for char in input.characters {
        if !set.contains(char) {
            result += String(char)
            set.insert(char)
        }
    }
    
    return result
}
